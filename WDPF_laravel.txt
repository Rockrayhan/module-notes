				========================= Laravel ==============================


{{ asset('/frontend/assets/images/about.webp') }}

===================== install process =======================
** enable intl, zip , curl extentions in php.ini


1. composer create-project laravel/laravel:^8 project1 		= install laravel project v8
composer create-project laravel/laravel:^10.0 example-app 	= v10
composer create-project --prefer-dist laravel/laravel:^11.0 example-app

2. php artisan serve						= run project
3. composer install						= get your packages ( like node modules )
4. composer require 
5. 





* run Laravel		= php artisan serve

* make controller	= php artisan make:controller AboutController 

* make model with table	= php artisan make:model Product -m	


* migration				= php artisan make:migration products1_migration;
* make migration table			= php artisan make:migration create_categories_table
* update / input any field in the table	= php artisan make:migration add_slug_to_blogs_table --table=blogs

* run migration (make the table in db)	= php artisan migrate
* make migration table with model	= php artisan make model ModelName -mr
* drop and fresh			= php artisan migrate:fresh
* role back and refresh. 		= php artisan migrate:refresh

* make cors		= php artisan make:filter Cors

* make seeder			= php artisan make:seeder UserSeeder
* run seed			= php artisan db:seed
* run exact seeder		= php artisan db:seed CategorySeeder
* make seed and migrate together	= php artisan migrate --seed


* make request			= php artisan make:request RegisterRequest


* see route lists		= php artisan route:list
* make auto methods for controller and models	 = php artisan make:model Category -mcr

* copy env file			= copy .env.example .env
				= php artisan key:generate

=================== seed =======================
** call the seeders in DatabaseSeeder.php
        $this->call(UserSeeder::class);
        $this->call(AdminSeeder::class);
        $this->call(CategorySeeder::class);
        $this->call(ProductSeeder::class);


**. enable the model  User::factory(10)->create() in DatbaseSeeder.php .
 then run cmd  = php artisan db:seed 



================= Enable Debugger ===================
		
*** composer require barryvdh/laravel-debugbar --dev		= enable debugger



===================================


***     public function store( Request $req ){			= Request is a object which passes its data to a parameter $req.
        echo $req->email ;
    }


*** value="{{ old('subject') }}"				= get the written value  in your input field


***        $messages = [
            'name.required' => 'Naam koi ??',
            'subject.required' => 'Subject den vai please',	= field required na thakle ai msg
            'subject.min' => 'Subject er length barao',		= field er minimum value na dile ai msg.
        ] ;



***  DB::table('categories')->insert($data); 			= connect with db directly without model



*** old()	= value="{{ old('name', $product['name']) }}"	= $product['name']( comes from database ) jodi na thake then old('name') (summitted data)
			   

================================== Authentication ================================

1. make middlewire = ** php artisan make:middleware userAuthentication
2. use middlewire class ( userAuthentication ) in kernel.php, use userAuth middlewire in desired route
3.


================================ multiple auth =============================



1. Migration for Admin		= php artisan make:migration create_admins_table
				= php artisan migrate
				

2. Make Model for Admin		php artisan make:model Admin
				= create Admin model as like User model.
	
3. create a admin guard & admin provider in auth.php/config

4. create middleware				= php artisan make:middleware Admin , make a condition
make admin middleware in kernel.php		= 'admin' => \App\Http\Middleware\Admin::class,

5. make controller				= php artisan make:controller AdminController
   make routes for the contorller		
   make view file for the routes
   make store method from auth.php/route -> AuthenticatedSessionController in your AdminController


6. ( optional ) make seeder.			= php artisan make:seeder AdminSeeder

seeder/AdminSeeder.php =>
	 DB::table('admins')->insert([
            'name' => 'admin',
            'email' => 'admin@gmail.com',
            'password' => Hash::make('password'),
            'status' => '1',
        ]);

						= php artisan db:seed AdminSeeder




=============================== Relational database Tables ===================================

https://laravel.com/docs/10.x/eloquent-relationships




***    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class, 'foriegnKey_id');		= give your forign key id table field name.
    }


*** categories , id = category_id 	 ( left side is primary key, right side is foreign key ) { if you want to connect automatically relationship }.





========================== Search =====================
https://www.itsolutionstuff.com/post/laravel-10-scout-full-text-search-tutorialexample.html


========================== add to cart ===================
https://www.itsolutionstuff.com/post/laravel-shopping-add-to-cart-with-ajax-exampleexample.html



============================ laravel traits ==================
https://onlinewebtutorblog.com/how-to-use-trait-in-laravel-10-example-tutorial/


============================ laravel spatie role and permission ===========
https://www.allphptricks.com/simple-laravel-10-user-roles-and-permissions/



=============================== laravel react crud =========================
https://www.nicesnippets.com/blog/laravel-10-react-crud-example-tutorial



=============================== laravel add to cart ========================
https://github.com/abdulaziz-m5u/ecommerce-youtube





=============================== laravel Vue inertia ===========================
https://larainfo.com/blogs/laravel-10-inertia-vue-3-crud-operation-example








======================== showing alerts =====================

@if (session('success'))
    <div class="alert alert-success">{{ session('success') }}</div>
@endif

@if ($errors->any())
    <div class="alert alert-danger">
        <ul>
            @foreach ($errors->all() as $error)
                <li>{{ $error }}</li>
            @endforeach
        </ul>
    </div>
@endif







    @if (session('success'))
        <div class="alert alert-success">{{ session('success') }}</div>
    @elseif (session('error'))
        <div class="alert alert-danger">{{ session('error') }}</div>
    @endif




==============================================================================





===================== delete with confirm msg ===============


 <td>
                        <form action="{{ route('messages.destroy', $message->id) }}" method="POST" onsubmit="return confirm('Are you sure you want to delete this message?');">
                            @csrf
                            @method('DELETE')
                            <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                        </form>
</td>



==============================================================

========== tinymce =========

* services =  {!! Str::limit(strip_tags($job->description), 100) !!}


* serviceDetails = {!! $job->description !!} 









================ Blade templating ===================

// app.blade.php

<!DOCTYPE html>
<html>
<head>
    <title>@yield('title', 'My Shop')</title>
    <link rel="stylesheet" href="{{ asset('css/mystyle.css') }}">
</head>
<body>
<header> </header>
    <div class="container">
        @yield('content')
    </div>
<footer> </footer>
</body>
</html>




// home.blade.php

@extends('layouts.app')

@section('title', 'Dashboard')

@section('content')
    <h1>Welcome to the Dashboard</h1>
    <p>This is the admin dashboard where you can manage the application.</p>
@endsection




// ===== for includes (sidebar , header, footer)  ======


// app.blade.php 

        {{--  Sidebar  --}}
        @include('backend.includes.sidebar')

        <!-- End Sidebar -->



//sidebar.blade.php

only raw html, no @extend, no @section

<div> sidebar </div>









**** for frontend ****

0. php artisan breeze:install react
1. inertia install for client side 		= npm install @inertiajs/react
2. 




/* styles.css */
.container {
    @apply mx-auto max-w-screen-xl;
  }


.center {
    @apply flex justify-center items-center;
  }


<div class="grid grid-cols-1  lg:grid-cols-4">
<div class="col-span-1 lg:col-span-1">








=============== queries ==========
1. what is middleware , why ? 
2. scope resulation ::  , $this , OOP, public, private, protected
3. Collect inteview questions and study them

public 	= can be accessed by all
private = 








** To do  for project**
1. make trigger for category X product
2. delete , edit for item 




* API = nijer software/data system er jonno onno kono existing software/ datasystem bebohar korake API (Application Programming Interface) bole.
* API is like a connector that connects User with Owner ( pathao - Google Map ). It takes the request from user, make the request to the owner and gives only the data that the user needs. ( like->  Customer -- waiter with food -- kitchen )














========= OOP Concept ==========
class, object, method, ingheritance, polimorphism, overloading, method chainnig, constructor, destructor, cloaning, serializing, interface, abstract

static method and  static property 



Autoload: 
jotogula class thakuk na keno ami jei class ke call korbo sei class call hoye jabe. Class name , file name same hoite hobe. ( shob unction ak sathe run hole site er load bere jay. jar karone autoload use kora hoy, jei method er kaj taake call korle sei method run hoye jabe. )


Final: Final keyword use korle kichu change kora jay na , inheritence kora jay na.



# __Construct()
The constructor is a special method in PHP classes that is automatically called when an object of the class is created using the new keyword.


# __desctruct()
When the object goes out of scope or is manually destroyed ( unset the object ) then the destruct function will be automatically called. But in php it has an automatic guarbage system so we don't need to use destruct often.


# inheritence

it means uttorshori(successor).




======================= .htaccess for redirect to public ===============

RewriteEngine on
RewriteCond %{HTTP_HOST} ^finaltouch.goaudiobook.com$ [NC,OR]
RewriteCond %{HTTP_HOST} ^www.finaltouch.goaudiobook.com$
RewriteCond %{REQUEST_URI} !^/public/
RewriteRule (.*) /public/$1 [L]


==========================================================================








========================================== quick notes ==========================================

* MiddleWire		= middlewire is used for user based route authorization and can filter HTTP requests entering your application.

* HTTP Request 		= a request that send by client to server to retrieving data or submitting form data.


* insert() vs create() 	* create() -> create automatic fillup timestamp, more secure, used in mass assingment
			* Requires $fillable or $guarded properties in the model to define which fields can be mass-assigned.
	

			* insert() -> Doesn't require $fillable or $guarded properties in the model.
		        * needs to fill up timestamp manually, less secure, less used.
			  

* find($id) vs findOrFail($id) 	= findOrFail() automatic returns not found error. used for automatic simple error handeling.
				= find() returns null for not found error, u have to use manually error	handeling.	


=====================================================================================
		Mysql unexpected shutdown error solving
=====================================================================================

1. xampp > mysql >  copy data to data_old

2. into "data" folder, delete > mysql , performance_schema, phpmyadmin, test
   delete all other files except > ibdata1

3. from "backup" folder copy every thing except ibdata1 and paste it to the "data" folder






====================== Laravel 11 ========================

*** error => SQLSTATE[HY000]: General error: 1273 Unknown collation: 'utf8mb4_0900_ai_ci'  ***


1. database.php > replace > 'collation' => env('DB_COLLATION', 'utf8mb4_0900_ai_ci'),
		     with > 'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),


2. add the line to your .env file  => DB_COLLATION=utf8mb4_unicode_ci










